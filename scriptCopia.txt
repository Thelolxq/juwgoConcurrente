const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const worker = new Worker('worker.js');
const moveWorkerTank1 = new Worker('workerMove.js');
const moveWorkerTank2 = new Worker('workerMove.js');
const backgroundImage = new Image();
const heartImage = new Image();
const tank1Image = new Image();
const tank2Image = new Image();
tank1Image.src = './assets/tanque1.png'; 
tank2Image.src = './assets/tanque2.png';
heartImage.src = './assets/corazon.png';
backgroundImage.src = './assets/fondo.png';
let heart = null;
let heartTimer = 0; 
const heartSpawnTime = 20000; 

function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
}

window.addEventListener('load', resizeCanvas);
window.addEventListener('resize', resizeCanvas);

const tank1 = {
    width: 60,
    height: 30,
    angle: 0,
    speed: 1,
    lives: 5,  
};

const tank2 = {
    width: 60,
    height: 30,
    angle: 0,
    speed: 1,
    lives: 5, 
};

const bullets = [];
let tank1Points = 0;
let tank2Points = 0;

function drawTank(tank, image) {
    ctx.save();
    ctx.translate(tank.x, tank.y);
    ctx.rotate(tank.angle);
    ctx.drawImage(image, -tank.width / 2, -tank.height / 2, tank.width, tank.height);
    ctx.restore();
}

function drawDirectionIndicator(tank) {
    ctx.save();
    ctx.translate(tank.x, tank.y);
    ctx.rotate(tank.angle);
    ctx.beginPath();
    ctx.moveTo(tank.width / 2 + 5, 0);
    ctx.lineTo(tank.width / 2 + 25, 0);
    ctx.strokeStyle = 'black';
    ctx.lineWidth = 2;
    ctx.stroke();
    ctx.restore();
}

function spawnHeart() {
    heart = {
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        width: 20,
        height: 20,
    };
}
function drawHeart() {
    if (heart) {
        ctx.drawImage(heartImage, heart.x, heart.y, heart.width, heart.height);
    }
}
function checkHeartCollision(tank) {
    if (heart && 
        tank.x < heart.x + heart.width && 
        tank.x + tank.width > heart.x && 
        tank.y < heart.y + heart.height && 
        tank.y + tank.height > heart.y) {
       
        tank.lives++;
        heart = null; 
    }
}



function drawBackground() {
    ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);
}

function drawBullets() {
    bullets.forEach(bullet => {
        ctx.save();
        ctx.translate(bullet.x, bullet.y);
        ctx.rotate(bullet.angle);
        ctx.fillStyle = 'red';
        ctx.fillRect(-bullet.width / 2, -bullet.height / 2, bullet.width, bullet.height);
        ctx.restore();
    });
}
const minimapHeartSize = 2;
function drawMinimap() {
    const minimapX = canvas.width - 150;
    const minimapY = 10;
    const minimapWidth = 140;
    const minimapHeight = 100;
    const scaleX = minimapWidth / canvas.width;
    const scaleY = minimapHeight / canvas.height;

    ctx.drawImage(backgroundImage, minimapX, minimapY, minimapWidth, minimapHeight);

    ctx.strokeStyle = 'black';
    ctx.lineWidth = 2;
    ctx.strokeRect(minimapX, minimapY, minimapWidth, minimapHeight);

    ctx.fillStyle = 'blue';
    ctx.beginPath();
    ctx.arc(minimapX + tank1.x * scaleX, minimapY + tank1.y * scaleY, 5, 0, Math.PI * 2); 
    ctx.fill();

    ctx.fillStyle = 'red';
    ctx.beginPath();
    ctx.arc(minimapX + tank2.x * scaleX, minimapY + tank2.y * scaleY, 5, 0, Math.PI * 2); 
    ctx.fill();
    if (heart) {
        ctx.fillStyle = 'pink';
        ctx.beginPath();
        ctx.arc(minimapX + heart.x * scaleX, minimapY + heart.y * scaleY, minimapHeartSize, 0, Math.PI * 2);
        ctx.fill();
    }
}
const smokeParticles = [];

function createSmokeParticle(x, y) {
    return {
        x: x,
        y: y,
        size: Math.random() * 5 + 2, 
        alpha: 1,
        lifetime: Math.random() * 30 + 20, 
    };
}
function updateSmokeParticles() {
    for (let i = smokeParticles.length - 1; i >= 0; i--) {
        const particle = smokeParticles[i];
        particle.alpha -= 1 / particle.lifetime; 
        particle.y -= 1; 

        if (particle.alpha <= 0) {
            smokeParticles.splice(i, 1); 
        }
    }
}

function drawSmokeParticles() {
    ctx.fillStyle = 'rgba(200, 200, 200, 1)'; 
    smokeParticles.forEach(particle => {
        ctx.fillStyle = `rgba(200, 200, 200, ${particle.alpha})`; 
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fill();
    });
}


function drawPoints() {
    ctx.font = '20px Arial';
    ctx.fillStyle = 'black';

    const rectX = 5;
    const rectY = 10;
    const rectWidth = 220;
    const rectHeight = 125;

    ctx.fillStyle = 'white';
    ctx.fillRect(rectX, rectY, rectWidth, rectHeight);

    ctx.strokeStyle = 'black';
    ctx.lineWidth = 2;
    ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);

    ctx.fillStyle = 'black';
    ctx.fillText(`Tanque 1 Puntos: ${tank1Points}`, 10, 30);
    ctx.fillText(`Tanque 2 Puntos: ${tank2Points}`, 10, 60);
    ctx.fillText(`Vidas Tanque 1: ${tank1.lives}`, 10, 90);
    ctx.fillText(`Vidas Tanque 2: ${tank2.lives}`, 10, 120);
}

let gameActive = true;

function checkGameOver() {
    if (tank1.lives <= 0 && gameActive) {
        alert('Tanque 2 ha ganado!');
        gameActive = false; // Detenemos el juego
    } else if (tank2.lives <= 0 && gameActive) {
        alert('Tanque 1 ha ganado!');
        gameActive = false; // Detenemos el juego
    }
}




function update() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBackground();
    drawTank(tank1, tank1Image);
    drawDirectionIndicator(tank1);
    drawTank(tank2, tank2Image);
    drawDirectionIndicator(tank2);
    drawBullets();
    drawPoints();
    drawMinimap();
    drawHeart(); 
    checkHeartCollision(tank1); 
    checkHeartCollision(tank2); 
    updateBullets();
    updateSmokeParticles(); 
    drawSmokeParticles()
    
    checkGameOver();  
}

worker.onmessage = function (e) {
    if (e.data.bullets) {
        bullets.length = 0;
        bullets.push(...e.data.bullets);
    }

    if (e.data.hit === 'tank1') {
        tank1Points++;
        tank1.lives--;  
    } else if (e.data.hit === 'tank2') {
        tank2Points++;
        tank2.lives--;  
    }
};

function updateBullets() {
    worker.postMessage({
        bullets,
        tank1,
        tank2,
        canvasWidth: canvas.width,
        canvasHeight: canvas.height
    });
}

const keys = {};
function moveTank(tank, up, down, left, right, moveWorker) {
    moveWorker.postMessage({
        tank,
        keys,
        up,
        down,
        left,
        right,
        canvasWidth: canvas.width,
        canvasHeight: canvas.height
    });

    moveWorker.onmessage = function (e) {
        let updatedTank = e.data.tank;
        if (updatedTank) {
            tank.x = updatedTank.x;
            tank.y = updatedTank.y;
            tank.angle = updatedTank.angle;

            if ((keys[up] || keys[down] || keys[left] || keys[right]) && tank.lives <= 3) {
                smokeParticles.push(createSmokeParticle(tank.x, tank.y));
            }
        }
    };
}

function shoot(tank) {
    const bullet = {
        x: tank.x + Math.cos(tank.angle) * (tank.width / 2 + 5), 
        y: tank.y + Math.sin(tank.angle) * (tank.width / 2 + 5), 
        width: 5,
        height: 10,
        angle: tank.angle,
        speed: 5,
    };
    bullets.push(bullet);
}

window.addEventListener('keydown', (e) => {
    keys[e.key] = true;
    if (e.key === 'Enter') {
        shoot(tank1);
    }
});

window.addEventListener('keydown', (e) => {
    if (e.key === ' ') {
        shoot(tank2);
    }
});

window.addEventListener('keyup', (e) => {
    keys[e.key] = false;
});
window.addEventListener('keydown', (e) => {
    if (e.key === 'r' && !gameActive) {
        resetGame();
        gameActive = true; // Reiniciamos el estado del juego
        gameLoop(); // Comenzamos el bucle de juego de nuevo
    }
});


function gameLoop() {
    if (!gameActive) return alert('presiona R para comenzar'); // Detener el bucle si el juego no estÃ¡ activo

    moveTank(tank1, 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', moveWorkerTank1);
    moveTank(tank2, 'w', 's', 'a', 'd', moveWorkerTank2);
    heartTimer += 16.67; 
    if (heartTimer >= heartSpawnTime) {
        spawnHeart();
        heartTimer = 0; 
    }
    update();
    requestAnimationFrame(gameLoop);
}
function getRandomPosition(tankWidth, tankHeight) {
    const x = Math.random() * (canvas.width - tankWidth) + tankWidth / 2;
    const y = Math.random() * (canvas.height - tankHeight) + tankHeight / 2;
    return { x, y };
}

function resetGame() {
    const randomPosition1 = getRandomPosition(tank1.width, tank1.height);
    const randomPosition2 = getRandomPosition(tank2.width, tank2.height);

    tank1.x = randomPosition1.x;
    tank1.y = randomPosition1.y ;
    tank1.angle = 0;
    tank1.lives = 5;
    tank1Points = 0;

    tank2.x = randomPosition2.x;
    tank2.y = randomPosition2.y;
    tank2.angle = 0;
    tank2.lives = 5;
    tank2Points = 0;

    bullets.length = 0;  
}

backgroundImage.onload = () => {
    resetGame()
    gameLoop();
};
